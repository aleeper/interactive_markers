struct PosAndNormal
{
  float4 pos;
  float3 normal;
};

PosAndNormal calculateBillboardVertexPositionAndNormalQuat(float4 pos, float2 tex, float4 rotation, float4 camera_pos, float4 size)
{ 
  float4 dir = float4(quaternionRotate(rotation, float3(tex.x, tex.y, 0.0) * size.xyz), 0.0 );
  
  PosAndNormal OUT;
  OUT.pos = pos + dir;
  OUT.normal = quaternionRotate(rotation, float3(0.0, 0.0, 1.0));
  return OUT;
}

PosAndNormal calculateBillboardVertexPositionAndNormal(float4 pos, float2 tex, float3 normal, float4 camera_pos, float4 size)
{
  float3 at = normal;
  float3 right = cross(float3( 0.0, 1.0, 0.0 ), at);
  float3 up = cross(at, right);
  right = normalize(right);
  up = normalize(up);
  
  float4 s = float4(tex, 0.0, 0.0) * size;
  float3 r = s.xxx * right;
  float3 u = s.yyy * up;
  
  float4 dir = vec4( r + u, 0.0 );
  
  PosAndNormal OUT;
  OUT.pos = pos + dir;
  OUT.normal = at;
  return OUT;
}

PosAndNormal calculateBillboardVertexPositionAndNormal(float4 pos, float2 tex, float4 camera_pos, float4 size)
{
  float3 at = normalize(camera_pos.xyz - pos.xyz);
  return calculateBillboardVertexPositionAndNormal(pos, tex, at, camera_pos, size);
}

PosAndNormal calculateBillboardSpheresVertexPositionAndNormal(float4 pos, float2 tex, float4 camera_pos, float4 size)
{
  return calculateBillboardVertexPositionAndNormal(pos, tex, camera_pos, size);
}

PosAndNormal calculateBillboardSpheresVertexPositionAndNormal(float4 pos, float2 tex, float3 normal, float4 camera_pos, float4 size)
{
  return calculateBillboardVertexPositionAndNormal(pos, tex, normal, camera_pos, size);
}

PosAndNormal calculateBillboardSpheresVertexPositionAndNormalQuat(float4 pos, float2 tex, float4 rotation, float4 camera_pos, float4 size)
{
  return calculateBillboardVertexPositionAndNormalQuat(pos, tex, rotation, camera_pos, size);
}

float4 calculateCommonFacingBillboardVertexPosition(float4 pos, float2 tex, float4 up, float4 normal, float4 size)
{
  float3 right = cross(up.xyz, normal.xyz);
  
  float4 s = float4(tex, 0.0, 0.0) * size;
  float3 r = s.xxx * right;
  float3 u = s.yyy * up.xyz;
  
  float4 dir = vec4( r + u, 0.0 );
  return pos + dir;
}
