// gaussian blur adapted from the Ogre samples
float4 blur(sampler blur_tex, float2 uv, float pixel_frac, float2 pos[7])
{
  //Calculated from the equation given on http://en.wikipedia.org/wiki/Gaussian_filter
  // with stddev = 2.0
  float sample_pct[7] =
  {
    0.064759,
    0.120985,
    0.176033,
    0.276446,
    0.176033,
    0.120985,
    0.064759
  };
  
  float4 sum = float4(0, 0, 0, 0);
  for(int i = 0;i < 7; i++)
  {
    float4 sample = tex2D(blur_tex, uv + (pos[i] * pixel_frac));
    sum = sum + (sample * sample_pct[i]);
  }
  
  return tex2D(blur_tex, uv);
  return saturate(sum);
}

float4 blur_horiz(sampler blur_tex, float2 uv, float pixel_frac)
{
  float2 pos[7] = 
  {
    float2( -3, 0),
    float2( -2, 0),
    float2( -1, 0),
    float2( 0, 0),
    float2( 1, 0),
    float2( 2, 0),
    float2( 3, 0)
  };

  return blur(blur_tex, uv, pixel_frac, pos);
}

float4 blur_vert(sampler blur_tex, float2 uv, float pixel_frac)
{
  float2 pos[7] = 
  {
    float2(0, -3),
    float2(0, -2),
    float2(0, -1),
    float2(0, 0),
    float2(0, 1),
    float2(0, 2),
    float2(0, 3)
  };

  return blur(blur_tex, uv, pixel_frac, pos);
}

float4 fp_main_horiz(float2 uv: TEXCOORD0, 

                     uniform sampler tex0: register(s0), // opaque final render
                     uniform float4 in_viewport_size) : COLOR 
{
  return blur_horiz(tex0, uv, in_viewport_size.z);
  //return tex2D(tex0, uv);
}

float4 fp_main_vert(float2 uv: TEXCOORD0, 

                     uniform sampler tex0: register(s0), // opaque final render
                     uniform float4 in_viewport_size) : COLOR 
{
  return blur_vert(tex0, uv, in_viewport_size.z);
  //return tex2D(tex0, uv);
}