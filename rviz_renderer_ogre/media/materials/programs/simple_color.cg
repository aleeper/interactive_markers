#include "gooch_98.cg"

struct VPOutput
{
  float4 position : POSITION;
  float4 color : COLOR;
  float3 normal : TEXCOORD0;
  float3 view_pos : TEXCOORD1;
};

VPOutput simpleColorVP_main(float4 position : POSITION, 
                            float4 color : COLOR,
                            float3 normal : NORMAL,
                                           
                            uniform float4x4 worldviewproj,
                            uniform float4x4 worldview)
{
  float3 view_pos = mul(worldview, position).xyz;

  VPOutput OUT;
  OUT.position = mul(worldviewproj, position);
  OUT.color = color;
  OUT.normal = normal;
  OUT.view_pos = view_pos;
  return OUT;
}

void simpleColorFP_main(float3 norm : TEXCOORD0, 
                        float4 view_pos : TEXCOORD1,
                        float4 screen_pos : WPOS,
                        out float4 out_color0 : COLOR0,
                        out float4 out_color1 : COLOR1,
				                uniform float4 color,
				                uniform sampler tex0: register(s0),
				                uniform float4 viewport_size,
				                uniform float in_far_clip)
{

  out_color0 = float4(color.rgb, 1.0);
  out_color1.rgb = norm;
  
  float depth = length(view_pos) / in_far_clip;
  out_color1.a = depth;
  
  //float2 sample_pos = view_pos.xy;//float2(viewport_size.z * screen_pos.x, viewport_size.w * screen_pos.y);
  //float4 stipple = tex2D(tex0, sample_pos * length(view_pos) * in_far_clip * 16);
  
  float2 sample_pos = (screen_pos / 4.0);// 4 == width and height of the stipple texture
  float4 stipple = tex3D(tex0, float3(sample_pos, 1 - color.a));
  
  discard(stipple.a > color.a);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
// GBuffer programs
///////////////////////////////////////////////////////////////////////////////////////////////////

void simpleColorGBufferVP_main(float4 in_position : POSITION, 
                                   float3 in_normal : NORMAL, 
                                   
                                   out float4 out_position : POSITION,
                                   out float3 out_normal : TEXCOORD0,
                                   out float3 out_view_pos : TEXCOORD1,
                                                 
                                   uniform float4x4 worldviewproj,
                                   uniform float4x4 worldview)
{
  out_position = mul(worldviewproj, in_position);
  out_normal = mul(worldview, float4(in_normal, 0.0)).xyz;
  out_view_pos = mul(worldview, in_position).xyz;
}

void simpleColorGBufferFP_main(float3 in_normal : TEXCOORD0,
                               float3 in_view_pos : TEXCOORD1,
                               
                               out float4 out_color0 : COLOR0,
                               out float4 out_color1 : COLOR1,
                               
                               uniform float4 in_color,
                               uniform float in_far_clip)
{
  out_color0 = float4(in_color.rgb, 0.0);
  out_color1.rgb = in_normal;
  
  float depth = length(in_view_pos) / in_far_clip;
  out_color1.a = depth;
}


